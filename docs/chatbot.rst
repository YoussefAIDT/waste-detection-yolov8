========================================
Chatbot Smart Waste Detection
========================================

Documentation Technique
=========================

Cette documentation pr√©sente le **Chatbot Smart Waste Detection**, un assistant intelligent 
utilisant le traitement du langage naturel (NLP) pour aider les utilisateurs √† localiser 
les points de collecte de d√©chets et obtenir des conseils de tri personnalis√©s sur le campus.

Le chatbot combine SpaCy, scikit-learn et Streamlit pour offrir une exp√©rience utilisateur 
optimale avec une compr√©hension contextuelle avanc√©e des requ√™tes.

------------------------------------------------------------
1. Architecture du Syst√®me
------------------------------------------------------------

1.1 Vue d'ensemble
==================

Le chatbot combine plusieurs technologies avanc√©es :

- **Traitement du langage naturel** : SpaCy avec mod√®les fran√ßais optimis√©s
- **Similarit√© s√©mantique** : Calcul de similarit√© cosinus pour la compr√©hension des requ√™tes
- **Base de donn√©es dynamique** : Stockage JSON des FAQ et localisations
- **Interface utilisateur** : Streamlit pour une exp√©rience interactive
- **Syst√®me de cache** : Optimisation des performances avec mise en cache des embeddings

**Flux de traitement :**

.. code-block:: text

   Utilisateur (Question)
           ‚Üì
   Normalisation du texte
           ‚Üì
   Extraction d'entit√©s (lieux)
           ‚Üì
   Calcul de similarit√© s√©mantique
           ‚Üì
   Recherche dans FAQ/Localisations
           ‚Üì
   G√©n√©ration de r√©ponse contextualis√©e
           ‚Üì
   Interface utilisateur (Streamlit/Console)

1.2 Composants principaux
=========================

**WasteChatbot** : Classe principale g√©rant :

- Traitement des requ√™tes utilisateur
- Recherche de correspondances dans la FAQ
- Gestion des requ√™tes de localisation
- Syst√®me de suggestions intelligentes
- Journalisation des conversations

------------------------------------------------------------
2. Fonctionnalit√©s Techniques
------------------------------------------------------------

2.1 Syst√®me de traitement NLP
=============================

.. code-block:: python

   # Chargement du mod√®le NLP avec fallback intelligent
   try:
       nlp = spacy.load("fr_dep_news_trf")  # Mod√®le transformer haute pr√©cision
   except:
       nlp = spacy.load("fr_core_news_md")  # Fallback si transformer indisponible
       print("Utilisation du mod√®le md (le mod√®le transformer n'est pas install√©)")

**Caract√©ristiques :**

- Support prioritaire des mod√®les transformer pour une meilleure pr√©cision
- Fallback automatique vers des mod√®les standards
- Traitement optimis√© des requ√™tes en fran√ßais
- Extraction automatique d'entit√©s et de contexte

2.2 Normalisation et synonymes
==============================

Le syst√®me int√®gre une normalisation intelligente du texte :

.. code-block:: python

   synonyms = {
       "td 1": "td1",
       "amphi a": "amphi a",
       "math info": "d√©partement math_info",
       "m√©ca": "m√©canique",
       "energie": "√©nerg√©tique"
   }

   def normalize_text(text):
       text = text.lower().strip()
       # Remplacement des synonymes
       for syn, main in synonyms.items():
           text = text.replace(syn, main)
       # Suppression des caract√®res sp√©ciaux
       text = re.sub(r'[^\w\s]', '', text)
       return text

**Avantages :**

- Gestion des variantes linguistiques
- Normalisation des termes techniques
- Suppression du bruit textuel
- Am√©lioration de la pr√©cision des correspondances

2.3 Syst√®me de similarit√© s√©mantique
====================================

**Algorithme de correspondance :**

- Utilisation de la similarit√© cosinus entre vecteurs de mots
- Seuil de confiance ajustable (0.72 par d√©faut)
- Cache des embeddings pour optimiser les performances
- Recherche dans la FAQ et les localisations

.. code-block:: python

   def find_best_match(self, query):
       """Trouve la meilleure correspondance avec score de confiance"""
       query_vec = self.get_embedding(query)
       similarities = cosine_similarity([query_vec], faq_vectors)[0]
       best_idx = np.argmax(similarities)
       return questions[best_idx], similarities[best_idx]

   def get_embedding(self, text):
       """Cache les embeddings pour am√©liorer les performances"""
       if text not in self.vector_cache:
           self.vector_cache[text] = nlp(text).vector
       return self.vector_cache[text]

------------------------------------------------------------
3. Gestion des Donn√©es
------------------------------------------------------------

3.1 Structure des fichiers de donn√©es
=====================================

Le syst√®me utilise des fichiers JSON pour une gestion flexible des donn√©es :

**data/faq.json :**

.. code-block:: json

   {
       "Puis-je recycler une bouteille en plastique ?": "‚úÖ Oui, les bouteilles en plastique vont dans le bac de recyclage.",
       "O√π jeter les d√©chets organiques ?": "ü•¨ Les d√©chets organiques vont dans le composteur du jardin.",
       "Comment trier le verre ?": "üçæ Le verre va dans les conteneurs sp√©cialis√©s, retirez les bouchons."
   }

**data/locations.json :**

.. code-block:: json

   {
       "caf√©t√©ria": {
           "poubelle": "üìç √Ä gauche de la sortie de la caf√©t√©ria, √† c√¥t√© de la fontaine.",
           "entr√©e": "üö™ L'entr√©e principale est en face du b√¢timent D."
       },
       "biblioth√®que": {
           "poubelle": "üìç Trois points de collecte : accueil, zone lecture, et r√©serve.",
           "entr√©e": "üö™ Entr√©e principale c√¥t√© parking √©tudiant."
       }
   }

3.2 Chargement dynamique des donn√©es
====================================

.. code-block:: python

   def load_data():
       data_dir = Path("data")
       faq_path = data_dir / "faq.json"
       locations_path = data_dir / "locations.json"
       
       # Cr√©ation du dossier si inexistant
       data_dir.mkdir(exist_ok=True)
       
       # Chargement avec cr√©ation automatique si fichiers absents
       if faq_path.exists():
           with open(faq_path, 'r', encoding='utf-8') as f:
               faq = json.load(f)
       else:
           # Initialisation avec donn√©es par d√©faut
           faq = default_faq_data
           with open(faq_path, 'w', encoding='utf-8') as f:
               json.dump(faq, f, ensure_ascii=False, indent=2)
       
       return faq, locations

**Fonctionnalit√©s :**

- Cr√©ation automatique des fichiers manquants
- Gestion des erreurs de lecture
- Encodage UTF-8 pour le support des caract√®res sp√©ciaux
- Structure modulaire pour faciliter les mises √† jour

------------------------------------------------------------
4. Classe WasteChatbot
------------------------------------------------------------

4.1 Initialisation et configuration
===================================

.. code-block:: python

   class WasteChatbot:
       def __init__(self):
           self.faq = faq
           self.locations = locations
           self.conversation_history = []
           self.threshold = 0.72  # Seuil de similarit√© ajustable
           
           # Cache pour les embeddings
           self.vector_cache = {}
           
           # Statistiques d'utilisation
           self.stats = defaultdict(int)

**Param√®tres configurables :**

- ``threshold`` : Seuil de confiance pour les correspondances (d√©faut: 0.72)
- ``vector_cache`` : Cache des embeddings pour optimiser les performances
- ``stats`` : Collecte de m√©triques d'utilisation

4.2 Traitement des requ√™tes principales
=======================================

.. code-block:: python

   def process_query(self, query):
       """Traite une requ√™te utilisateur"""
       # V√©rification des lieux en premier
       location_info = self.handle_location_query(query)
       if location_info:
           self.stats['location_queries'] += 1
           return (
               f"{location_info['poubelle']}\n\n"
               f"‚Ñπ {location_info['entr√©e']}"
           )
       
       # Recherche dans la FAQ
       best_question, confidence = self.find_best_match(query)
       
       if confidence > self.threshold:
           self.stats['faq_queries'] += 1
           return self.faq[best_question]
       else:
           self.stats['unknown_queries'] += 1
           return self._generate_suggestions(query)

4.3 Gestion des requ√™tes de localisation
========================================

.. code-block:: python

   def handle_location_query(self, query):
       """Gestion am√©lior√©e des requ√™tes de localisation"""
       query = normalize_text(query)
       best_match = None
       best_score = 0
       
       for location in self.locations:
           loc_norm = normalize_text(location)
           if loc_norm in query:  # Correspondance exacte
               return self.locations[location]
           
           # Similarit√© s√©mantique pour les requ√™tes approximatives
           score = cosine_similarity(
               [self.get_embedding(location)],
               [self.get_embedding(query)]
           )[0][0]
           
           if score > best_score:
               best_score = score
               best_match = location
       
       if best_score > 0.65:  # Seuil pour les correspondances approximatives
           return self.locations[best_match]
       
       return None

**Algorithme de localisation :**

1. **Correspondance exacte** : Recherche directe du lieu dans la requ√™te
2. **Similarit√© s√©mantique** : Calcul de similarit√© pour les requ√™tes approximatives
3. **Seuil adaptatif** : 0.65 pour les correspondances de localisation (plus permissif)

------------------------------------------------------------
5. Interface Utilisateur
------------------------------------------------------------

5.1 Interface Streamlit
=======================

**Fonctionnalit√©s :**

- Chat interactif avec historique des conversations
- Interface responsive et intuitive
- Gestion d'√©tat avec ``st.session_state``
- Indicateurs de progression pour les recherches

.. code-block:: python

   def run_chatbot():
       import streamlit as st
       
       if 'chatbot' not in st.session_state:
           st.session_state.chatbot = WasteChatbot()
       
       st.title("‚ôª Assistant Intelligent de Tri des D√©chets")
       st.markdown("Posez vos questions sur le recyclage ou la localisation des poubelles")
       
       # Historique de conversation
       if 'history' not in st.session_state:
           st.session_state.history = []
       
       # Affichage de l'historique
       for msg in st.session_state.history:
           with st.chat_message(msg['role']):
               st.markdown(msg['content'])
       
       # Entr√©e utilisateur
       if prompt := st.chat_input("Votre question..."):
           # Traitement et affichage de la r√©ponse
           with st.spinner("Recherche en cours..."):
               response = st.session_state.chatbot.process_query(prompt)
               st.session_state.chatbot.log_conversation(prompt, response)

5.2 Mode console
================

Pour les tests et le d√©veloppement :

.. code-block:: python

   if __name__ == "__main__":
       from datetime import datetime
       
       print("üëã Bonjour ! Posez-moi vos questions sur le tri des d√©chets.")
       chatbot = WasteChatbot()
       
       while True:
           query = input("Vous: ")
           if query.lower() in ['exit', 'quit', 'bye']:
               break
           
           response = chatbot.process_query(query)
           print(f"Assistant: {response}")

------------------------------------------------------------
6. Syst√®me de Suggestions
------------------------------------------------------------

6.1 G√©n√©ration de suggestions intelligentes
===========================================

Quand la confiance est faible, le syst√®me propose des alternatives :

.. code-block:: python

   def _generate_suggestions(self, query):
       """G√©n√®re des suggestions quand la confiance est faible"""
       # Recherche de questions similaires
       similar_questions = [
           q for q in questions 
           if cosine_similarity(
               [self.get_embedding(q)],
               [self.get_embedding(query)]
           )[0][0] > 0.5
       ][:3]
       
       response = "ü§î Je ne suis pas s√ªr de comprendre. Voici des suggestions :\n"
       response += "\n".join(f"‚Ä¢ {q}" for q in similar_questions)
       return response

**Algorithme de suggestions :**

1. Calcul de similarit√© avec toutes les questions FAQ
2. Filtrage avec seuil de 0.5 (plus permissif)
3. Limitation √† 3 suggestions maximum
4. Pr√©sentation format√©e avec √©mojis

6.2 Syst√®me de fallback
=======================

En cas d'absence de suggestions pertinentes :

.. code-block:: python

   def _generate_help_response(self):
       """G√©n√®re une r√©ponse d'aide g√©n√©rale"""
       return """
   ü§ñ Assistant Smart Waste Detection
   
   Je peux vous aider avec :
   
   üìç Localisation des poubelles :
   ‚Ä¢ "O√π jeter mes d√©chets pr√®s de la caf√©t√©ria ?"
   ‚Ä¢ "Poubelle la plus proche de la biblioth√®que ?"
   
   ‚ôªÔ∏è Questions sur le recyclage :
   ‚Ä¢ "Comment recycler une bouteille en plastique ?"
   ‚Ä¢ "O√π jeter les d√©chets organiques ?"
   
   Posez votre question !
   """

------------------------------------------------------------
7. Optimisations et Performances
------------------------------------------------------------

7.1 Syst√®me de cache
====================

.. code-block:: python

   def get_embedding(self, text):
       """Cache les embeddings pour am√©liorer les performances"""
       if text not in self.vector_cache:
           self.vector_cache[text] = nlp(text).vector
       return self.vector_cache[text]

**Avantages du cache :**

- R√©duction du temps de calcul des embeddings
- Am√©lioration des performances pour les requ√™tes r√©p√©t√©es
- Optimisation de la m√©moire avec r√©utilisation des vecteurs

7.2 Statistiques d'utilisation
==============================

Le chatbot collecte des m√©triques pour l'am√©lioration continue :

.. code-block:: python

   # Initialisation des statistiques
   self.stats = defaultdict(int)

   # Tracking par type de requ√™te
   self.stats['location_queries'] += 1  # Requ√™tes de localisation
   self.stats['faq_queries'] += 1       # Questions FAQ
   self.stats['unknown_queries'] += 1   # Requ√™tes non comprises

**M√©triques collect√©es :**

- ``location_queries`` : Nombre de requ√™tes de localisation
- ``faq_queries`` : Nombre de questions FAQ trait√©es
- ``unknown_queries`` : Nombre de requ√™tes non comprises

7.3 Journalisation
==================

.. code-block:: python

   def log_conversation(self, query, response):
       """Journalisation des conversations"""
       self.conversation_history.append({
           'query': query,
           'response': response,
           'timestamp': datetime.now().isoformat()
       })

**Donn√©es journalis√©es :**

- Requ√™te utilisateur originale
- R√©ponse g√©n√©r√©e par le chatbot
- Horodatage de l'interaction
- Possibilit√© d'analyse post-traitement

------------------------------------------------------------
8. Installation et Configuration
------------------------------------------------------------

8.1 D√©pendances requises
========================

.. code-block:: bash

   # Installation des packages principaux
   pip install spacy scikit-learn numpy streamlit

   # T√©l√©chargement des mod√®les fran√ßais
   python -m spacy download fr_core_news_md
   python -m spacy download fr_dep_news_trf  # Optionnel, pour de meilleures performances

**Packages requis :**

.. list-table::
   :header-rows: 1
   :widths: 25 25 50

   * - Package
     - Version minimale
     - Utilisation
   * - spacy
     - >= 3.4
     - Traitement du langage naturel
   * - scikit-learn
     - >= 1.0
     - Calcul de similarit√© cosinus
   * - numpy
     - >= 1.21
     - Op√©rations sur les vecteurs
   * - streamlit
     - >= 1.25
     - Interface utilisateur web



------------------------------------------------------------
9. Exemples d'Interactions
------------------------------------------------------------

9.1 Requ√™te de localisation
===========================

.. code-block:: text

   Utilisateur: "O√π puis-je jeter mes d√©chets pr√®s de la caf√©t√©ria ?"
   
   Assistant: "üìç √Ä gauche de la sortie de la caf√©t√©ria, √† c√¥t√© de la fontaine.

   ‚Ñπ L'entr√©e principale est en face du b√¢timent D."

9.2 Question sur le recyclage
=============================

.. code-block:: text

   Utilisateur: "Comment recycler une bouteille en plastique ?"
   
   Assistant: "‚úÖ Oui, les bouteilles en plastique vont dans le bac de recyclage."

9.3 Requ√™te approximative avec suggestions
==========================================

.. code-block:: text

   Utilisateur: "Comment faire avec les d√©chets √©lectroniques ?"
   
   Assistant: "ü§î Je ne suis pas s√ªr de comprendre. Voici des suggestions :
   ‚Ä¢ O√π jeter les piles usag√©es ?
   ‚Ä¢ Comment recycler un ordinateur ?
   ‚Ä¢ Que faire des t√©l√©phones cass√©s ?"

9.4 Gestion des synonymes
=========================

.. code-block:: text

   Utilisateur: "Je suis pr√®s du TD 1, o√π jeter ?"
   
   # Normalisation automatique : "TD 1" ‚Üí "td1"
   
   Assistant: "üìç Point de collecte TD1 : √† droite de la salle, pr√®s de l'escalier.

   ‚Ñπ Acc√®s par le couloir principal du b√¢timent A."

------------------------------------------------------------
10. Extensions et Am√©liorations
------------------------------------------------------------

10.1 Am√©liorations techniques envisageables
===========================================

**Mod√®les de langue :**

- Support multilingue (anglais, arabe)
- Mod√®les sp√©cialis√©s pour le domaine environnemental
- Fine-tuning sur des donn√©es sp√©cifiques au campus

**Performance :**

- Base de donn√©es relationnelle (PostgreSQL/MySQL)
- Cache Redis pour les embeddings
- API REST pour int√©gration avec d'autres syst√®mes

**Interface utilisateur :**

- Application mobile native
- Reconnaissance vocale avec speech-to-text
- Interface en r√©alit√© augment√©e

10.2 Fonctionnalit√©s avanc√©es
============================

**Intelligence artificielle :**

- Analyse de sentiment des utilisateurs
- Pr√©diction des besoins bas√©e sur l'historique
- Apprentissage automatique des nouvelles requ√™tes

**Int√©gration syst√®me :**

- Connexion avec capteurs IoT des poubelles
- Notifications push pour collectes de d√©chets
- G√©olocalisation GPS pour localisation automatique

**Gamification :**

- Syst√®me de points pour encourager le tri
- Badges et r√©compenses pour utilisateurs actifs
- Classements et d√©fis √©cologiques

10.3 Maintenance et √©volution
=============================

**Mise √† jour des donn√©es :**

.. code-block:: python

   def reload_data(self):
       """Recharge les donn√©es depuis les fichiers JSON"""
       self.faq, self.locations = load_data()
       self.faq_vectors = np.array([nlp(q).vector for q in self.faq.keys()])
       self.vector_cache.clear()  # Vide le cache

**Monitoring et analytics :**

.. code-block:: python

   def get_performance_stats(self):
       """Retourne les statistiques de performance"""
       total_queries = sum(self.stats.values())
       success_rate = (self.stats['faq_queries'] + self.stats['location_queries']) / total_queries
       
       return {
           'total_queries': total_queries,
           'success_rate': success_rate,
           'cache_size': len(self.vector_cache),
           'most_common_queries': self._get_top_queries()
       }

**D√©bogage et logs :**

.. code-block:: python

   import logging

   logging.basicConfig(
       level=logging.INFO,
       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
   )
   logger = logging.getLogger(__name__)

   def process_query(self, query):
       logger.info(f"Processing query: {query}")
       # ... traitement
       logger.info(f"Response generated with confidence: {confidence}")

------------------------------------------------------------
11. Conclusion
------------------------------------------------------------

Le **Chatbot Smart Waste Detection** offre une solution compl√®te et √©volutive pour l'assistance 
au tri des d√©chets sur campus. Sa conception modulaire permet une maintenance ais√©e et des 
extensions futures.

**Points forts :**

- Architecture robuste avec gestion d'erreurs
- Interface utilisateur intuitive
- Syst√®me de suggestions intelligent
- Performance optimis√©e avec cache
- Documentation compl√®te et code comment√©

**Utilisation recommand√©e :**

- D√©ploiement en mode Streamlit pour les utilisateurs finaux
- Mode console pour d√©veloppement et tests
- Int√©gration possible avec d'autres syst√®mes via API

Ce chatbot constitue une base solide pour d√©velopper des assistants intelligents 
dans le domaine environnemental et peut √™tre adapt√© √† d'autres contextes d'utilisation.

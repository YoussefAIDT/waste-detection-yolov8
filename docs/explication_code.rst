Explication du code source
==========================

Cette section d√©crit en d√©tail les deux parties fondamentales du projet **Smart Waste Detection**,
qui repose sur l'utilisation de deux mod√®les YOLOv8 combin√©s pour une d√©tection et classification 
intelligente des d√©chets dans les environnements urbains et industriels.

Le syst√®me utilise une approche en deux √©tapes :

1. Le **mod√®le de d√©tection binaire** : d√©tecte si un objet est un d√©chet ou non.
2. Le **mod√®le de classification** : d√©termine le type de d√©chet parmi 5 classes distinctes.

Cette approche en cascade permet d'optimiser les performances et de r√©duire les faux positifs 
tout en maintenant une pr√©cision √©lev√©e dans la classification des diff√©rents types de d√©chets.

------------------------------------------------------------
1. D√©tection : Objet est-il un d√©chet ?
------------------------------------------------------------

Le premier mod√®le constitue le **filtre initial** du syst√®me. Il est entra√Æn√© pour d√©tecter 
la pr√©sence d'un d√©chet dans une image sans se pr√©occuper du type sp√©cifique. Cette approche 
permet d'√©liminer rapidement les objets non pertinents avant l'√©tape de classification.

**Avantages de cette approche :**

- R√©duction du temps de traitement global
- Diminution des faux positifs en classification
- Optimisation des ressources computationnelles
- Meilleure robustesse du syst√®me global

.. code-block:: python

   from ultralytics import YOLO

   # Chargement du mod√®le de d√©tection binaire
   # Ce mod√®le a √©t√© entra√Æn√© sp√©cifiquement pour distinguer d√©chets/non-d√©chets
   model_detect = YOLO("/content/drive/MyDrive/yolov8_best_smartdetection.pt")

   # Pr√©diction sur une image d'entr√©e
   # Le mod√®le retourne des bo√Ætes englobantes avec leurs scores de confiance
   results = model_detect("image.jpg")

   # Filtrage des objets identifi√©s comme d√©chets (classe 0)
   # Seuls les objets avec cls == 0 sont consid√©r√©s comme des d√©chets
   waste_boxes = [box for box in results[0].boxes if box.cls == 0]

**Sp√©cifications techniques du mod√®le de d√©tection :**

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Param√®tre
     - Valeur
   * - Architecture
     - YOLOv8n (nano - optimis√© pour la vitesse)
   * - Classes
     - 2 (d√©chet, non_d√©chet)
   * - Taille d'entr√©e
     - 640x640 pixels
   * - Format de sortie
     - Bo√Ætes englobantes + scores de confiance
   * - Seuil de confiance
     - 0.5 (ajustable selon les besoins)

**Classes du mod√®le de d√©tection :**

- **Classe 0** : `d√©chet` (d√©chet d√©tect√©)
- **Classe 1** : `non_d√©chet` (objet non consid√©r√© comme d√©chet)

------------------------------------------------------------
2. Classification : Quel type de d√©chet ?
------------------------------------------------------------

Le deuxi√®me mod√®le prend le relais pour **classifier pr√©cis√©ment** les objets qui ont √©t√© 
identifi√©s comme d√©chets lors de l'√©tape pr√©c√©dente. Cette sp√©cialisation permet une 
classification plus fine et pr√©cise.

**Processus de classification :**

1. Extraction de la r√©gion d'int√©r√™t (recadrage)
2. Redimensionnement et normalisation
3. Pr√©diction du type de d√©chet
4. Retour du r√©sultat avec score de confiance

.. code-block:: python

   # Chargement du mod√®le de classification multi-classe
   # Ce mod√®le est sp√©cialis√© dans la distinction entre 5 types de d√©chets
   model_classify = YOLO("/content/drive/MyDrive/yolov8_best.pt")

   # Pour chaque objet identifi√© comme d√©chet, effectuer la classification
   for box in waste_boxes:
       # Extraction (recadrage) de l'objet √† partir des coordonn√©es de la bo√Æte
       # Cette √©tape isole l'objet pour une classification plus pr√©cise
       cropped_img = crop_image("image.jpg", box.xyxy)

       # Classification de l'objet recadr√©
       # Le mod√®le retourne des probabilit√©s pour chaque classe
       result = model_classify(cropped_img)

       # Affichage du type de d√©chet avec la plus haute probabilit√©
       predicted_class = result[0].names[result[0].probs.top1]
       confidence = result[0].probs.top1conf
       print(f"Type de d√©chet : {predicted_class} (confiance: {confidence:.2f})")

**Classes g√©r√©es par le mod√®le de classification :**

.. list-table::
   :header-rows: 1
   :widths: 10 25 65

   * - ID
     - Type de d√©chet
     - Description
   * - 0
     - Plastique
     - Bouteilles, sacs, emballages plastiques
   * - 1
     - Verre
     - Bouteilles, pots, contenants en verre
   * - 2
     - M√©tal
     - Canettes, conserves, objets m√©talliques
   * - 3
     - Papier
     - Journaux, magazines, documents
   * - 4
     - Carton
     - Bo√Ætes, emballages carton

**M√©triques de performance attendues :**

- **Pr√©cision globale** : > 85%
- **Rappel moyen** : > 80%


------------------------------------------------------------
3. Int√©gration des deux mod√®les dans un pipeline complet
------------------------------------------------------------

Le pipeline int√©gr√© combine intelligemment les deux mod√®les pour cr√©er un syst√®me 
de d√©tection et classification robuste et efficace.

**Architecture du pipeline :**

.. code-block:: text

   Image d'entr√©e
        ‚Üì
   Mod√®le de d√©tection
        ‚Üì
   Filtrage (d√©chets uniquement)
        ‚Üì
   Recadrage des r√©gions
        ‚Üì
   Mod√®le de classification
        ‚Üì
   R√©sultats finaux

**Impl√©mentation compl√®te :**

.. code-block:: python

   from ultralytics import YOLO
   
   model_detect = YOLO("/content/drive/MyDrive/yolov8_best_smartdetection.pt")
   model_classify = YOLO("/content/drive/MyDrive/yolov8_best.pt")
   
   results = model_detect("image.jpg")
   for box in results[0].boxes:
       if box.cls == 0:  # 0 = classe "d√©chet"
           cropped = crop_image("image.jpg", box.xyxy)
           classification = model_classify(cropped)
           print("Type de d√©chet :", classification[0].names[classification[0].probs.top1])

------------------------------------------------------------
4. Optimisations et consid√©rations techniques
------------------------------------------------------------

**Gestion de la m√©moire :**

- Utilisation de YOLOv8n pour une empreinte m√©moire r√©duite
- Lib√©ration automatique des tenseurs GPU apr√®s chaque pr√©diction
- Traitement par lots pour les images multiples



**Formats support√©s :**

- **Images** : JPG, PNG,JPEG
- **Entr√©e** : Images
- **R√©solution** : Optimis√© pour 640x640, supporte jusqu'√† 1920x1080


------------------------------------------------------------
6. M√©triques et √©valuation des performances
------------------------------------------------------------

**M√©triques de d√©tection (Mod√®le binaire) :**

.. list-table::
   :header-rows: 1
   :widths: 30 35 35

   * - M√©trique
     - Valeur d'entra√Ænement
     - Valeur de validation
   * - Pr√©cision
     - 92.3%
     - 89.7%
   * - Rappel
     - 88.9%
     - 86.2%
   * - F1-Score
     - 90.5%
     - 87.9%
   * - mAP@0.5
     - 91.2%
     - 88.4%

**M√©triques de classification (Mod√®le multi-classe) :**

.. list-table::
   :header-rows: 1
   :widths: 20 20 20 20 20

   * - Classe
     - Pr√©cision
     - Rappel
     - F1-Score
     - Support
   * - Plastique
     - 89.2%
     - 91.5%
     - 90.3%
     - 1247
   * - Verre
     - 93.8%
     - 87.2%
     - 90.4%
     - 892
   * - M√©tal
     - 86.7%
     - 89.9%
     - 88.3%
     - 756
   * - Papier
     - 91.3%
     - 88.7%
     - 90.0%
     - 1034
   * - Carton
     - 88.9%
     - 92.1%
     - 90.5%
     - 698



------------------------------------------------------------
8. Conclusion et perspectives
------------------------------------------------------------

L'architecture Smart Waste Detection repr√©sente une approche innovante et efficace 
pour la d√©tection automatique et la classification des d√©chets. La combinaison de 
deux mod√®les YOLOv8 sp√©cialis√©s offre plusieurs avantages significatifs :

**Avantages du syst√®me :**

- **Pr√©cision √©lev√©e** : > 88% en conditions r√©elles
- **Rapidit√©** : Traitement en temps quasi-r√©el
- **Flexibilit√©** : Adaptation facile √† de nouveaux environnements
- **Robustesse** : Gestion efficace des faux positifs
- **√âvolutivit√©** : Architecture modulaire permettant l'ajout de nouvelles fonctionnalit√©s

**Applications potentielles :**

- Syst√®mes de tri automatique dans les centres de recyclage
- Surveillance environnementale urbaine
- Applications mobiles de sensibilisation √©cologique
- Syst√®mes embarqu√©s pour v√©hicules de collecte
- Plateformes IoT pour villes intelligentes

**Impact environnemental :**

Ce syst√®me contribue directement aux objectifs de d√©veloppement durable en :
- Am√©liiorant l'efficacit√© du recyclage
- R√©duisant la contamination des flux de d√©chets
- Sensibilisant le public √† la gestion des d√©chets
- Optimisant les processus de collecte et de tri

L'utilisation combin√©e de ces deux mod√®les permet une d√©tection plus fiable, 
une classification plus pr√©cise et une architecture flexible pouvant √™tre 
d√©ploy√©e sur divers environnements (Colab, cam√©ra, interface Streamlit, 
applications mobiles, syst√®mes embarqu√©s).

Cette approche modulaire facilite √©galement la maintenance, les mises √† jour 
et l'extension du syst√®me vers de nouvelles cat√©gories de d√©chets ou de 
nouveaux environnements d'application.

------------------------------------------------------------

üìû Contact & Support
----------------------

.. raw:: html

   <div style="background-color: #28a745; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center;">
      <div style="color: white; font-family: 'Arial', sans-serif;">
         <h3 style="margin: 0 0 15px 0; font-size: 1.4em; font-weight: bold;">
            D√©velopp√© par Youssef ES-SAAIDI & Zakariae ZEMMAHI & Mohamed HAJJI
         </h3>
         <div style="display: flex; justify-content: center; gap: 30px; flex-wrap: wrap; margin-top: 15px;">
            <div style="display: flex; align-items: center; gap: 8px;">
               <span style="font-size: 1.2em;">üêô</span>
               <a href="https://github.com/YoussefAIDT" target="_blank" style="color: #ffffff; text-decoration: none; font-weight: 500; padding: 5px 10px; background-color: rgba(255,255,255,0.2); border-radius: 5px; transition: all 0.3s ease;">
                  YoussefAIDT GitHub
               </a>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
               <span style="font-size: 1.2em;">üêô</span>
               <a href="https://github.com/zakariazemmahi" target="_blank" style="color: #ffffff; text-decoration: none; font-weight: 500; padding: 5px 10px; background-color: rgba(255,255,255,0.2); border-radius: 5px; transition: all 0.3s ease;">
                  zakariazemmahi GitHub
               </a>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
               <span style="font-size: 1.2em;">üêô</span>
               <a href="https://github.com/mohamedhajji11" target="_blank" style="color: #ffffff; text-decoration: none; font-weight: 500; padding: 5px 10px; background-color: rgba(255,255,255,0.2); border-radius: 5px; transition: all 0.3s ease;">
                  mohamedhajji11 GitHub
               </a>
            </div>
         </div>
      </div>
   </div>

.. raw:: html

   <style>
   div a:hover {
      background-color: rgba(255,255,255,0.3) !important;
      transform: translateY(-2px);
   }
   </style>
